e* ifcfg-ethX文件配置解析
 在RedHat中，系统网络设备的配置文件保存在/etc/sysconfig/network-scripts目录下，ifcfg-eth0包含第一块网卡的配置信息，ifcfg-eth1包含第二块网卡的配置信息。在启动时，系统通过读取这个配置文件决定某个网卡是否启动和如何配置。

#+BEGIN_EXAMPLE
# 网卡名,应该和配置文件对应
DEVICE=eth0
# 网卡类型
TYPE=Ethernet
# 网卡的UUID号
UUID=89e7fcd7-1365-414c-bab8-ec92cb91a7f0
# ip地址
IPADDR=192.168.0.2
# 子网掩码
NETMASK=255.255.255.0
# 广播地址
BROADCAST=192.168.0.255
# 是否激活该卡: 是
ONBOOT=yes
# none: 无须启动协议; bootp: 使用bootp协议; dhcp: 使用dhcp协议; static:使用静态IP
BOOTPROTO=none
# 网关地址
GATEWAY＝192.168.0.1
# 是否允许非root用户控制该设备
USERCTL=yes/no
# 不使用NetManagerControl进行控制
NM_CONTROLLED=no
#+END_EXAMPLE
* network文件配置解析
该文件用来指定服务器上的网络配置信息，下面是一个示例：

#+BEGIN_EXAMPLE
NETWORK=yes
RORWARD_IPV4=yes
HOSTNAME=server.wuxp.com
GAREWAY=192.168.0.1
GATEWAYDEV=eth0

NETWORK=yes/no　　　　 网络是否被配置
FORWARD_IPV4=yes/no　　　　 是否开启IP转发功能
HOSTNAME= 表示服务器的主机名
GAREWAY=
# 表示网络网关的IP地址
GAREWAYDEV=　　 表示网关的设备名，如：eth0
#+END_EXAMPLE

* resolv文件配置解析
    文件/etc/resolv.conf配置DNS客户端，它包含了DNS服务器地址和域名搜索配置，每一行应包含一个关键字和一个或多个的由空格隔开的参数。下面是一个例子文件：

#+BEGIN_EXAMPLE
search wuxp.com
nameserver 192.168.0.1
nameserver 192.168.0.2
#+END_EXAMPLE

    search wuxp.com:表示当提供了一个不包括完全域名的主机名时，在该主机名后添加wuxp.com的后缀；nameserver:表示解析域名时使用该地址指定的主机为域名服务器。其中域名服务器是按照文件中出现的顺序来查询的。因此，应该首先给出最可靠的服务器。目前，至多支持三个名字服务器。

* 单网卡配置双IP
  - 配置第一个IP地址
    #+BEGIN_EXAMPLE
    [root@Linux root]#cd /etc/sysconfig/network-scripts 
    [root@Linux network-scripts]#vi ifcfg-eth0 
    DEVICE=eth0 
    BOOTPROTO=static 
    BROADCAST=192.168.80.255 //*广播地址*// 
    IPADDR=192.168.80.189 //*第一个IP地址*// 
    NETMASK=255.255.255.0 //*网络掩码*// 
    NETWORK=192.168.80.0 //*所在网段*// 
    ONBOOT=yes 
    :wq //*保存退出*//
    #+END_EXAMPLE
  - 复制第一个IP地址配置文件为第二个IP地址配置文件，并修改里面的IP地址
    #+BEGIN_EXAMPLE
    [root@Linux network-scripts]#cp ifcfg-eth0 ifcfg-eth1 
    [root@Linux network-scripts]#vi ifcfg-eth1 
    DEVICE=eth0:1 //用eth0也可以，也能通，但是重启网卡时会提示eth0 file existed！ 
    BOOTPROTO=static 
    BROADCAST=192.168.80.255 //*广播地址*// 
    IPADDR=192.168.80.199 //*第二个IP地址*// 
    NETMASK=255.255.255.0 //*网络掩码*// 
    NETWORK=192.168.80.0 //*所在网段*// 
    ONBOOT=yes 
    :wq //*保存退出*//
    #+END_EXAMPLE
  - 重启网卡
    - 方法一 :: =[root@Linux network-scripts]#service network restart=
    - 方法二 :: =[root@Linux network-scripts]#ifdown eth0= =[root@Linux network-scripts]#ifup eth0=
    - 方法三 :: =[root@Linux network-scripts]#ifconfig eth0 down= =[root@Linux network-scripts]#ifconfig eth0 up=
* 多个网卡绑定成一块虚拟网卡
 为了提供网络的高可用性，我们可能需要将多块网卡绑定成一块虚拟网卡对外提供服务，这样即使其中的一块物理网卡出现故障，也不会导致连接中断。比如我们可以将eth0和eth1绑定成虚拟网卡bond0

首先在/etc/sysconfig/network-scripts/下创建虚拟网卡bond0的配置文件ifcfg-bond0，内容如下

DEVICE=bond0
BOOTPROTO=none
BROADCAST=192.168.168.255
IPADDR=192.168.168.1
NETMASK=255.255.255.0
NETWORK=192.168.168.0
ONBOOT=yes
TYPE=Ethernet
GATEWAY=192.168.168.250
USERCTL=no

然后分别修改eth0和eth1的配置文件
ifcfg-eth0内容：

DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
USERCTL=no
MASTER=bond0
SLAVE=yes

ifcfg-eth1内容

DEVICE=eth1
BOOTPROTO=none
ONBOOT=yes
USERCTL=no
MASTER=bond0
SLAVE=yes

因为linux的虚拟网卡是在内核模块中实现的，所以需要安装的时候已经装好该module。在/etc/modprobe.conf文件（好像有些老版本是/etc/modules.con）中添加如下内容（如果没有该文件，则新建一个）：

alias bond0 bonding
options bond0 miimon=100 mode=1 primary=eth0

其中miimon=100表示每100ms检查一次链路连接状态，如果不通则会切换物理网卡
mode=1表示主备模式，也就是只有一块网卡是active的，只提供失效保护。如果mode=0则是负载均衡模式的，所有的网卡都是active，还有其他一些模式很少用到
primary=eth0表示主备模式下eth0为默认的active网卡

最后，在/etc/rc.local中加入

modprobe bonding miimon=100 mode=1

重启机器后可以看到虚拟网卡已经生效，可以通过插拔两个物理网卡的网线来进行测试，不过linux中网卡接管的时间好象比较长。


参考资料：
http://ningzi82.itpub.net/post/12186/505365
http://www.ningoo.net/html/2007/redhat_linux_network_configuration_and_bond.html
