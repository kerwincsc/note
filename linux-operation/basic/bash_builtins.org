
* BASH内建工具

** alias

   #+BEGIN_QUOTE
   alias [-p] [ _name_[= _value_ ] ...]
   #+END_QUOTE

   不带参数的 *Alias* 或者带 *-p* 选项的 *Alias* 会在标准输出以 *alias* _name_ = _value_ 的形式打印别名的列表;

   当参数被提供时, 别名将被定义给每一个给定了 _value_ 的 _name_ ;

   _value_ 中的尾部空格会导致当别名扩展时，将检查下一个单词是否为别名替换;

   对于参数列表中每一个没有提供 _value_ 的 _name_ , 则打印别名的名称和值[fn:1];

   队非给定的 _name_ 没有被定义为别名, 才会返回假, 其它均返回真[fn:2];


** bg|fg|jobs

*** bg

    #+BEGIN_QUOTE
    bg [ _jobsepc_ ...]
    #+END_QUOTE

    在后台恢复运行每一个被暂停的作业 _jobsepc_ 的运行, 就好像它被用 =&= 启动了一样.

    如果 _jobspec_ 未指定, 将会按shell意见使用最近的作业.

    bg _jobspec_ 返回零, 除非运行时作业控制是禁止的, 或者运行时作业控制是允许的, 但是被指定的 _jobspec_ 一个都没有找到, 或者没有以作业控制启动.

*** fg

    #+BEGIN_QUOTE
    fg [ _jobspec_ ]
    #+END_QUOTE

    恢复 _jobspec_ 到前台, 并且使它成为当前作业. 如果 _jobspec_ 未指定, 将会按shell意见使用最近的作业.

    返回值有以下几种情况: 

    1. 放到前台执行的命令的返回值;

    2. 将返回失败:

       - 作业控制被关闭时运行;

       - 作业控制被打开时运行, 倘若 _jobspec_ 没有指定一个合法作业或者 _jobsepc_ 指定了一个没有以作业控制启动的作业;

*** jobs

    #+BEGIN_QUOTE
    jobs [-lnprs] [ _jobspec_ ... ]

    jobs -x command [ _args_ ... ]
    #+END_QUOTE

    第一种形式列出了活动的作业. 它的选项有以下意思:

    #+BEGIN_EXAMPLE
    -l     除了正常信息外, 列出进程ID
    -n     仅显示作业的状态已发生改变的信息, 在它们的状态最后一次通知给用户之后
    -p     仅显示作业进程组的领导者的进程ID
    -r     仅输出运行状态（running）的任务；
    -s     仅输出停止状态（stoped）的任务;
    #+END_EXAMPLE

    如果给定 _jobspec_ , 只输出关于那项作业的信息. 只有遇到不合法选项或者提供了不合法的 _jobspec_ , 返回状态才不为 0 ;

    如果提供了 =-x= 选项, jobs 以对应的进程组ID替换任何一个在 _command_ 或 _args_ 中找到的 _jobspec_ , 并且传递 _args_ 给 _command_ 执行, 返回它的退出状态.

    备注: jobs -x 用法完全看不明白.在后台恢复运行每一个被暂停的作业 _jobsepc_ 的运行, 就好像它被用 =&= 启动了一样.

如果 _jobspec_ 未指定, 将会按shell意见使用最近的作业
** bind
   #+BEGIN_QUOTE
   bind [-m _keymap_ ] [-lpsvPSV]

   bind [-m _keymap_ ] [-q _function_ ] [-u _function_ ] [-r _keyseq_ ]

   bind [-m _keymap_ ] -f _filename_

   bind [-m _keymap_ ] -x _keyseq:shell-command_

   bind [-m _keymap_ ] _keyseq : function-name_

   bind _readline-command_
   #+END_QUOTE

   显示当前的 *readline* 键和函数绑定,
   把一个 *readline* 函数或者宏绑定在一个键序列上或者设置一个 *readline* 变量.

   当每一个非选项参数出现在 _.inputrc_ 中时, 它就是一个命令,
   但是每一个绑定或者命令必须以独立的参数被传递; 例如, '"\C-x\C-r": re-read-init-file'.

   选项如果被提供, 它将有如下含义:

   - =-m keymap= 使用 _keymap_ 作为由于随后的绑定被影响的键映射.
                     可接受的 _keymap_ 名称为 _emacs_ , _emacs-standard_ ,
                     _emacs-meta_ , _emacs-ctlx_ , _vi_ , _vi-move_ ,
                     _vi-command_ , 和 _vi-insert_ .
                     _vi_ 等同于 _vi-command_ ; _emacs_ 等同于 _emacs-standard_ .
   - =-l= 列出所有的 *readline* 函数的名称;
   - =-p= 以 *readline* 函数名称和绑定能够被重新读取的方式显示它们;
   - =-P= 列出当前 *readline* 函数名和绑定;
   - =-s= 显示绑定给宏的 *readline* 键序列和他们以能够被重新读取的方式输出的字符串;
   - =-S= 显示绑定宏的 *readline* 键序列和它们输出的字符串;
   - =-v= 以 *readline* 变量名和值能够被重新读取的方式显示它们;
   - =-V= 列出当前的 *readline* 变量名和值;
   - =-f filename= 从filename中读取键绑定;
   - =-q function= 查询调用了function的键;
   - =-u function= 解绑所有绑定给名为function的键;
   - =-r keyseq= 为keyseq移除任何当前的绑定;
   - =-x keyseq:shell-command= 无论何时当keyseq被输入时, 将引发shell-command被执行;
     当shell-command被执行时,
     shell把 *READLINE_LINE* 变量设为 *readline* 行缓冲的内容,
     把 *READLINE_POINT* 变量设为插入点的当前位置.

     如果被执行的命令改变了 *READLINE_LINE* 或者 *READLINE_POINT* 的值,
     这些新的值将在编辑状态里反应出来.


   除非一个无法识别的选项被给定或者一个错误发生了, 返回值将是零;
** break
   #+BEGIN_QUOTE
   break [ _n_ ]
   #+END_QUOTE

   从 *for* , *while* , *until*  或者 *select* 循环退出. 如果 _n_ 被指定, 退出 _n_ 级.
   _n_ 必须 >= 1 . 

   如果 _n_ 大于闭合循环的数量, 所有的闭合循环将退出.

   当 _n_ <= 0 时, 返回值为非零; 否则 *break* 返回 0 ;
** builtin
    #+BEGIN_QUOTE
    builtin _shell-builtin_ [ _arguments_ ]
    #+END_QUOTE

    执行指定的shell内建(命令), 传递 _arguments_ 给它, 并且返回它的退出状态;

    这很有用, 当定义了一个函数, 这个函数的名称与shell内建(命令)相同时,
    可以保留函数内部的内建(命令)的功能性;
    内建命令 *cd* 通常这样被重新定义;

    如果 _shell-builtin_ 不是shell内建命令, 返回状态为假;
    
** caller
   #+BEGIN_QUOTE
   caller [ _expr_ ]
   #+END_QUOTE

   返回任何活动的子程序调用的上下文(shell函数或者以内建的 *.* 或者 *source* 执行的脚本).

   不带 _expr_ 时, *caller* 显示当前子程序调用的行号和源文件名;

   如果一个非负的整数被提供以作为 _expr_ , *caller* 显示与在当前执行调用堆栈中的那个位置相对应的行号, 子程序名和源文件.
   此额外信息可被用来打印堆栈跟踪. 当前的栈桢是桢 0 .

   返回值通常为 0, 除非shell没有执行子程序调用或者在调用栈内 _expr_ 没有对应的有效位置.
** cd
   #+BEGIN_QUOTE
   cd [-L| [-P [-e]]] [ _dir_ ]
   #+END_QUOTE

   将当前目录改变为 _dir_ . 默认的 _dir_ 值是变量 *HOME* .

   变量 *CDPATH* 给包含了 _dir_ 的目录定义了搜索路径.
   在 *CDPATH* 中可选的目录名称被冒号(:)分隔.

   *CDPATH* 内的空目录名与当前目录一样, 就是 *.* .

   如果 _dir_ 以斜线(/)开头, 那么 *CDPATH* 将不会被使用.

   *-P* 选项告诉我们去使用物理目录结构, 而不是在它后面接符号链接(参考内置命令 *set* 中的);
   *-L* 选项强制跟随符号链接;

   如果 *-*P* 后选项还跟着 *-e* 选项并且在一次成功地目录改变之后当前工作目录仍不能被成功地确定,
   *cd* 将返回不成功的状态.[fn:3]

   参数 *-* 与 *$OLDPWD* 相等.

   如果一个来自 *CDPATH* 的非空目录名被使用了,
   或者如果 *-* 是第一个参数, 并且目录切换成功,
   新的工作目录的绝对路径名将被写到标准输出[fn:4];

   如果目录被成功改变, 就返回真, 否则返回假;
** command
   #+BEGIN_QUOTE
   command [-pVv] _command_ [arg ...]
   #+END_QUOTE

   带 args 执行 _command_ , 这抑制了正常的shell函数查找;

   只有内建命令或在 *PATH* 能够找到的命令会被执行;

   如果给定了 *-p* 选项, 对于 _command_ 的搜索被执行,
   使用一个有关 *PATH* 的默认值以保证找到所有的标准工具;[fn:9]

   如果 *-V* 或 *-v* 之一被提供, _command_ 的描述将被打印出来;
   *-v* 选项导致指示命令的单字被显示或者导致用来调用 _command_ 的文件名被显示;
   *-V* 选项产生一个更加冗长的描述.

   如果 *-V* 或者 *-v* 选项被提供, 假如 _command_ 被找到,
   则退出状态为 0 , 假如没有找到, 则为 1 .

   如果两个选项都没有被提供并且一个错误发生了勤或者找不到 _command_ ,
   退出状态为 127 . 不然, *command* 内建命令的退出状态就是 _command_ 的退出状态;
   
** declare/typeset两个命令相同

   #+BEGIN_QUOTE
   declare [-aAfFgilrtux] [-p] [ _name_[= _value_ ] ...]

   typeset [-aAfFgilrtux] [-p] [ _name_[= _value_ ] ...]
   #+END_QUOTE

   声明变量或给他们赋予属性. 如果没有指定 _name_ 那么就显示变量的值.

   *-p* 选项将显示每个 _name_ 的属性和值.
   当使用带有 _name_ 参数的 *-p* 选项时, 其他选项将被忽略.
   当使用不带有 _name_ 参数的 *-p* 选项时, 它将显示所有的,被附加选项指定了属性的,变量的属性和值.[fn:5]
   如果没有其他选项提供给 *-p* , *declare* 将显示所有的shell变量的属性和值.

   *-f* 选项将只限显示shell函数. *-F* 选项禁止显示函数定义; 仅打印函数名和函数属性.
   在使用 *shopt* 时, 如果 *extdebug* 选项是打开的, 定义了函数的源文件的名字和行号也将被显示.
   *-F* 隐含于 *-f* .[fn:6]

   *-g* 选项强制变量在全局作用域被创建或被修改, 即使是在shell函数里执行了 *declare* .

   接下来的选项能够限制输出变量指定的属性或者给变量限定属性:

   - *-a*     每个 _name_ 是一个索引数组变量 (参考上面的数组)
   - *-A*     每个 _name_ 是一个关联数组变量 (参考上面的数组)
   - *-f*     仅使用函数名
   - *-i*     把变量当作整数; 当变量被分配了一个值时, 执行算术求值(参考上方的算术求值);
   - *-l*     当变量被分配一个值, 所有的大写字符串被转换成小写. 大写属性是禁止的;
   - *-r*     使 _name_ 只读. 这些变量名就不能被后面的赋值语句分配值或重置值.
   - *-t*     赋予每一个 _name_ _trace_ 属性. 跟踪函数从调用它的shell中
              继承 *DEBUG* 和 *RETURN* 情境.[fn:7] 跟踪属性对变量而言没有特殊意义.
   - *-u*     当变量被赋予了一个值, 所有的小写字符将被转换成大写. 小写属性是禁止的.
   - *-x*     标记 _name_ 通过环境输出给后面的命令.[fn:8]

   使用'+'替代'-'来关闭属性, 但是以下是例外: +a 未必是用来消毁一个数组变量, +r 不会移除只读属性.

   当在函数中使用时, 每个 _name_ 都是本地的, 与本地命令一样.
   如果一个变量名后被 _=value_ 跟着, 变量的值就被设定为 _value_ .

   除非遇到非法选项, 否则返回值是 0 .
   尝试去定义一个使用"-f foo=bar"的函数;
   尝试去给一个只读变量赋值;
   尝试不使用复合赋值语法(参考上方的数组内容), 去给一个数组变量赋值;
   其中一个 _name_ 不是合法的shell变量名;
   尝试去关闭只读变量的只读状态;
   尝试去关闭一个数组变量的数组状态;
   或者尝试去用 -f 显示一个不存在的函数;
   

** history

   常见用法: 不加任何选项, 直接查看历史命令

   - 技巧

     - 查看各命令被执行的具体时间
       
       #+BEGIN_SRC shell
       # 临时添加, 适合用在公司服务器上
       export HISTTIMEFORMAT="%F %T  "
       #+END_SRC
       要想永久添加, 可以将上面的语句写入 =.bashrc | .bash_profile | /etc/bashrc | /etc/profile= 内

** kill

   备注: 此命令有两个, 一个是bash自带的, 另一个是util-linux包中的一个命令;
   #+BEGIN_QUOTE
   kill [-s _sigspec_ | -n _signum_ | - _sigspec_ ] [ _pid_ | _jobspec_ ] ...

   kill -l [ _sigspec_ | _exit-status_ ]
   #+END_QUOTE

   发送指定的sigspec或指定的signum信号给指定的pid的或jobspec进程.
   sigspec 要么是一个大小写敏感的信号名, 比如 *SIGKILL* (前缀SIG带不带都行), 要么是一个信号数;
   signum指的就是信号数.
   如果sigspec未指定, 那么sigspec就被假定是 *SIGTERM* .
   *-l* 的参数列出信号名. 当给定 *-l* 选项时, 如果提供了任意一个参数, 对应参数的信号名将被列出,
   并且返回状态为0.
   *-l* 的exit_status参数要么是一个指定信号数的数字, 要么是被一个信号终结了的进程的退出状态.
   如果至少有一个信号被成功地发送, *kill* 将返回True; 如果发生了错误或遇到了非法选项, 它将返回False

** [[file:set.org][set]]
** shift
   #+BEGIN_QUOTE
   shift [ _n_ ]
   #+END_QUOTE
   来自 =n+1= ... 的位置参数被重命名为 =$1= .... 代表数字 *$#* 到 *$#-n+1* 的参数被撤消.
   _n_ 必须是一个小于等于 *$#* (参数个数) 的非负数. 如果 _n_ 是 0 , 没有参数会被更改.
   如果 _n_ 未指定, 它将被假设成是 1 . 如果 _n_ 比 *$#* (参数个数) 大, 位置参数将不会被改变.
   如果 _n_ 大于 *$#* 或者小于 0 , 返回值将大于0; 否则就返回 0 .

** [[file:shopt.org][shopt]]
** source 和 .

   #+BEGIN_QUOTE
   source _filename_ [ _arguments_ ]

   . _filename_ [ _arguments_ ]
   #+END_QUOTE

   在当前的shell环境下, 从 _filename_ 读取并执行命令,
   并且从 _filename_ 中返回最后一条被执行的命令的退出状态;

   如果 _filename_ 不包含一个斜杠,
   在 *PATH* 里的文件名们将被用来找到包含 _filename_ 的目录;

   在 *PATH* 中搜索的文件不需要是可执行的;

   当 *bash* 不在 _posix_ 模式时, 如果在 *PATH* 里没有找到文件, 当前目录就将被搜索;

   如果内置命令 *shopt* 的 *sourcepath* 选项被关闭, 就不会搜索 *PATH* ;

   如果一些 _arguments_ 被提供了, 当 _filename_ 被执行时, 他们将变成位置参数;
   此外位置参数是不变的;

   返回状态是脚本内最后一个命令的退出状态( 如果没有命令被执行, 就是 0 ),
   并且如果 _filename_ 未找到或者不能被读取, 就返回失败(false);

* Footnotes

[fn:9] 这句不会翻译, 先跳过去;
If the -p option is given,
the search for command  is  performed  using  a  default value for *PATH* 
that is guaranteed to find all of the standard utilities.

[fn:1] 
示例:
#+BEGIN_QUOTE
[root@centos7 shell]# alias mv rm tt

alias mv='mv -i'
alias rm='rm -i'
-bash: alias: tt: 未找到
#+END_QUOTE

[fn:2] 即使定义的别名为空;

[fn:3]
=cd -P= 后面跟软链接时, 会直接切换到软链接指向的地址. 注: 不允许将硬链接指向目录;
=cd -P -e= 此选项功能暂时未知;

[fn:4] 即被打印到屏幕上

[fn:5] 
以下是人话: 如果这个变量在声明时同时指定了值和属性, 就显示出这个变量的值和属性;
如果没有, 就显示变量的值;

[fn:6] The -F option implies -f. 原名是这样的, 我也不会翻了.

[fn:7] 这是原句: Traced  functions inherit the DEBUG and RETURN traps from the calling shell.

[fn:8] 指定的变量会成为环境变量，可供shell以外的程序来使用；

