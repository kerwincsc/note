#+TITLE: set命令详解

* set命令详解

#+BEGIN_QUOTE
set [--abefhkmnptuvxBCEHPT] [-o _option_name_ ] [ _args_ ...]

set [+abefhkmnptuvxBCEHPT] [+o _option_name_ ] [ _args_ ...]
#+END_QUOTE

没有选项时, 每个shell变量的名称和值被以某种方式显示, 这种方式可以再次使用变量以设定或重置当前设定的变量值.
只读变量不能被重置. 在 _posix_ 模式里, 只列出shell变量. 根据当前字符集排序后输出变量.

当属性被被指定时, 他们将会设定或重置shell属性. 任何跟在选项后面的参数的处理被当作是位置参数的值,
并且按顺序分配给 *$1, $2, ... $n* . 

如果选项被指定的话, 他有以下的意义:

- *-a*     自动地标记被修改或被创建的变量和函数以便输出给后面命令的运行环境;
- *-b*     立刻报告被终止的后台作业的状态, 而不是在下一个主提示符之前报告.[fn:1] 只有当作业控制被打开, 这才生效.
- *-e*     如果一个被圆括号括起的管道(pipeline)(也许由单个简单的命令组成), 一个被圆括号括起的子shell(subshell)命令,
           或者一个由括号(参考 *SHELL GRAMMER*)闭合的命令列表的部分命令中的一个被执行而以非零的状态退出, 就立刻退出.

           shell不会退出, 如果此失败的命令是 *while* 或者 *until* 关键字后面的命令列表的一部分;
           是 *if* 或者 *elif* 保留字后的测试部分;
           是任何被在 *&&* 或者 *||* 中执行的部分, 除了跟在最后的 *&&* 或 *||* 中的命令, 除了任何管道中的最后一个命令,
           或者如果命令的返回值被以 *!* 取反.

           如果在 *ERR* 上设定了一个陷阱, 将会在shell退出前被执行. 

           此选项适用于shell环境和每一个独立的子shell环境, 并且也许会引发在子shell的所有命令执行完之前的子shell退出.
- *-f*     禁用路径名扩展;[fn:2]
- *-h*     记住命令的位置, 当他们被查询去执行时. 这个默认是允许的.
- *-k*     赋值语句形式的所有参数都放在环境中, 而不仅仅是命令名前面的命令;
- *-m*     监控模式. 作业控制是允许的. 此选项在支持它的系统上的交互式的shell中默认是打开的(参考 JOB CONTROL).
           后台进程在一个独立的进行组中运行并且直到它们完成, 一个包含了它们运行状态的行才被打印.
- *-n*     读取命令而不运行他们. 这可能会被用来检查shell脚本的语法错误. 在交互式的shell中, 此选项被忽略.
- *-o _option-name_ * 此选项名( _option-name_ ) 可能是下面中的一个:
           #+BEGIN_QUOTE
           *allexport*     和 /-a/ 相同.

           *braceexpand*   和 /-B/ 相同.

           *emacs*         使用emacs风格的命令行编辑接口. 当此shell交互式的shell, 这是默认打开的,
                           除非该shell以 *--noediting* 选项开启. 这也会影响 *read -e* 编辑界面的使用.

           *errexit*       同 /-e/

           *errtrace*      同 /-E/

           *functrace*     同 /-T/

           *hashall*       同 /-h/

           *histexpand*    同 /-H/

           *history*       打开命令历史, 就像在上方的 *HISTORY* 下描述的一样. 此项在交互式shell中默认打开.

           *ignoreeof*     它的效果就好像shell命令 "IGNOREEOF=10" 被执行了.

           *keyword*       同 /-k/

           *monitor*       同 /-m/

           *noclobber*     同 /-C/

           *noexec*        同 /-n/

           *noglob*        同 /-f/

           *nolog*         当前被忽略

           *notify*        同 /-b/

           *nounset*       同 /-u/

           *onecmd*        同 /-t/

           *physical*      同 /-P/

           *pipefail*      如果设定, 一个管道的返回值将是以非0状态退出的最后(最右)的命令的值,
                           或者如果管道中的所有命令成功地退出, 就返回零. 这个选项默认情况下是禁止的;

           *posix*         改变 *bash* 的 默认操作不同于POSIX标准的行为以匹配标准( _posix mode_ );

           *privileged*    同 /-p/

           *verbose*       同 /-v/

           *vi*            使用vi风格的命令行编辑界面. 这也会影响 *read -e* 编辑界面的使用.

           *xtrace*        同 /-x/ ; 
                           如果使用 *-o* 后面没有带上 _option-name_ , 将打印当前选项的值.
                           如果 *+o* 后面没有带上 _option-name_ , 将在标准输出上显示一系列用于重新创建当前选项设置的命令;
           #+END_QUOTE
- *-p*     打开 *privileged* 模式. 在这个模式中, =$ENV= 和 =$BASH_ENV= 文件不会被处理, shell函数不会从运行环境中继承,
           并且如果 *SHELLOPTS* , *BASHOPTS* , *CDPATH* 和 *GLOBIGNORE* 变量出现在运行环境中, 他们将被忽略.
           如果以有效的用户(组)id不等于真实的用户(组)id的方式启动shell, 并且 *-p* 选项没有被提供,
           这些措施将被采用并且有效用户id将被设置成真实的用户id;
           如果 *-p* 选项在启动时就被提供, 有效用户id将不会被重置.
           将这个选项关闭将会引起有效用户id和组id被设置成真实的用户id和组id;
- *-t*     在读取并运行了一个命令后, 就退出;
- *-u*     当执行参数扩展时, 把未设置的变量和参数当成是一个错误, 除了特殊参数 "@" 和 "*" ;
           如果企图在一个未设置的变量或参数上扩展, shell将打印出错误信息, 并且, 如果在非交互式下, 将以一个非零的状态退出;
- *-v*     打印shell输入行, 就像他们被读取一样;
- *-x*     在展开每一个简单的命令之后, 如 *for* , *case* , *select* 或者算术 *for* 命令, 它将显示被展开的 *PS4* 的值,
           其后跟着此命令, 它的展开参数或者关联字符列表;
- *-B*     shell执行花括号扩展(参考 *花括号扩展* ). 此项默认开启;
- *-C*     如果设定此选项, *bash* 将不会以 *>, >& 和 <>* 重定向操作符覆盖一个已经存在的文件.
           当使用重定向操作符 *>|* 代替 *>* 创建一个输出文件时, 这也许会被覆盖.
- *-E*     如果设置, 在 *ERR* 上的任何陷阱将被shell函数, 命令替换和在子shell环境中执行的命令继承;
           正常情况下, *ERR* 陷阱不会被继承;
- *-H*     开启 *!* 风格的历史替换. 当是交互式的shell时, 此选项默认被打开;
- *-P*     如果设置, 当执行命令, 比如 *cd* 来改变当前工作目录时, shell不会跟踪符号链接.
           它使用物理目录结构作为替代. 默认情况下, 当运行更改当前工作目录的命令时, *bash* 跟踪逻辑目录链.
- *-T*     如果设置, 任何在 *DEBUG* 和 *RETURN* 上的陷阱将被shell函数, 命令替换和在子shell环境中执行的命令所继承;
           正常情况下, *DEBUG* 和 *RETURN* 陷阱是不会被继承的;
- *--*     如果此选项后面没有参数, 那么位置参数就不会被设定. 否则, 位置参数将被设定成 _args_ . 即使他们中的一些以一个 *-* 开始;
- *-*      发出选项结束的信号, 导致所有剩余的 _args_ 被分配给位置参数. 选项 *-x* 和 *-v* 被关闭. 如果没有 _args_ , 位置参数保持不变;

除非另有说明，否则选项默认关闭. 使用 "+" 让关闭这些选项而不是 "-" . 这些选项也可以指定为shell调用的参数. 当前选项的设定可以在 *$-* 找到.
除非遇到一个非法选项, 否则返回值总是为真;

* Footnotes

[fn:2] 取消使用通配符

[fn:1] 暂时没发现有什么作用, 有待今后深入接触.
