#+TITLE: set命令详解

* set命令详解

#+BEGIN_QUOTE
set [--abefhkmnptuvxBCEHPT] [-o _option_name_ ] [ _args_ ...]

set [+abefhkmnptuvxBCEHPT] [+o _option_name_ ] [ _args_ ...]
#+END_QUOTE

没有选项时, 每个shell变量的名称和值被以某种方式显示, 这种方式可以再次使用变量以设定或重置当前设定的变量值.
只读变量不能被重置. 在 _posix_ 模式里, 只列出shell变量. 根据当前字符集排序后输出变量.

当属性被被指定时, 他们将会设定或重置shell属性. 任何跟在选项后面的参数的处理被当作是位置参数的值,
并且按顺序分配给 *$1, $2, ... $n* . 

如果选项被指定的话, 他有以下的意义:

- *-a*     自动地标记被修改或被创建的变量和函数以便输出给后面命令的运行环境;
- *-b*     立刻报告被终止的后台作业的状态, 而不是在下一个主提示符之前报告.[fn:1] 只有当作业控制被打开, 这才生效.
- *-e*     如果一个被圆括号括起的管道(pipeline)(也许由单个简单的命令组成), 一个被圆括号括起的子shell(subshell)命令,
           或者一个由括号(参考 *SHELL GRAMMER*)闭合的命令列表的部分命令中的一个被执行而以非零的状态退出, 就立刻退出.

           shell不会退出, 如果此失败的命令是 *while* 或者 *until* 关键字后面的命令列表的一部分;
           是 *if* 或者 *elif* 保留字后的测试部分;
           是任何被在 *&&* 或者 *||* 中执行的部分, 除了跟在最后的 *&&* 或 *||* 中的命令, 除了任何管道中的最后一个命令,
           或者如果命令的返回值被以 *!* 取反.

           如果在 *ERR* 上设定了一个陷阱, 将会在shell退出前被执行. 

           此选项适用于shell环境和每一个独立的子shell环境, 并且也许会引发在子shell的所有命令执行完之前的子shell退出.
- *-f*     禁用路径名扩展;[fn:2]
- *-h*     记住命令的位置, 当他们被查询去执行时. 这个默认是允许的.
- *-k*     赋值语句形式的所有参数都放在环境中, 而不仅仅是命令名前面的命令;
- *-m*     监控模式. 作业控制是允许的. 此选项在支持它的系统上的交互式的shell中默认是打开的(参考 JOB CONTROL).
           后台进程在一个独立的进行组中运行并且直到它们完成, 一个包含了它们运行状态的行才被打印.
- *-n*     读取命令而不运行他们. 这可能会被用来检查shell脚本的语法错误. 在交互式的shell中, 此选项被忽略.
- *-o _option-name_ * 此选项名( _option-name_ ) 可能是下面中的一个:
           #+BEGIN_QUOTE
           *allexport*     和 /-a/ 相同.

           *braceexpand*   和 /-B/ 相同.

           *emacs*         使用emacs风格的命令行编辑接口. 当此shell交互式的shell, 这是默认打开的,
                           除非该shell以 *--noediting* 选项开启. 这也会影响 *read -e* 编辑接口的使用.

           *errexit*       同 /-e/

           *errtrace*      同 /-E/

           *functrace*     同 /-T/

           *hashall*       同 /-h/

           *histexpand*    同 /-H/

           *history*       允许命令历史, 就像在上方的 *HISTORY* 下描述的一样. 此项在交互式shell中默认打开.
           #+END_QUOTE

* Footnotes

[fn:2] 取消使用通配符

[fn:1] 暂时没发现有什么作用, 有待今后深入接触.
