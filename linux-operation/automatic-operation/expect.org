#+TITLE: expect用法记录
#+OPTIONS: toc
* expect用法记录
** 常见语法解析
   1. ［#!/usr/bin/expect］

      这一行告诉操作系统脚本里的代码使用那一个shell来执行。这里的expect其实和linux下的bash、windows下的cmd是一类东西; 

      注意：这一行需要在脚本的第一行

   2. ［set timeout 30］

      基本上认识英文的都知道这是设置超时时间的，现在你只要记住他的计时单位是：秒   。timeout -1 为永不超时

   3. ［spawn ssh -l username 192.168.1.1］

      spawn是进入expect环境后才可以执行的expect内部命令，如果没有装expect或者直接在默认的SHELL下执行是找不到spawn命令的。所以不要用 “which spawn“之类的命令去找spawn命令。好比windows里的dir就是一个内部命令，这个命令由shell自带，你无法找到一个dir.com 或 dir.exe 的可执行文件。 

      它主要的功能是给ssh运行进程加个壳，用来传递交互指令

   4. [ expect "password:" ]

      这里的expect也是expect的一个内部命令，有点晕吧，expect的shell命令和内部命令是一样的，但不是一个功能，习惯就好了。这个命令的意思是判断上次输出结果里是否包含“password:”的字符串，如果有则立即返回，否则就等待一段时间后返回，这里等待时长就是前面设置的30秒;

   5. ［send "ispass\r"］

      这里就是执行交互动作，与手工输入密码的动作等效。 

      温馨提示： 命令字符串结尾别忘记加上“\r”，如果出现异常等待的状态可以核查一下;

   6. ［interact］

      执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行;

   7. $argv 参数数组

      expect脚本可以接受从bash传递过来的参数.可以使用[lindex $argv n]获得，n从0开始，分别表示第一个,第二个,第三个....参数
      
** 脚本案例分析
   #+BEGIN_EXAMPLE
   #!/usr/bin/expect
   set host "192.168.0.248"
   set user "root"
   set password "123456"

   spawn ssh $user@$host

   expect {
       "yes/no" { send "yes\r"; exp_continue }
       "password:" { send "$password\r" }
   }
   interact
   #+END_EXAMPLE
   这种配置较为简单, 就是密码容易被别人看到; 还有另一种方法, 就是利用参数数组, 在执行expect时, 传入用户名和密码, 这样相对会比较安全. 

   #+BEGIN_EXAMPLE
   #!/usr/bin/expect

   set user [lindex $argv 0]
   set host [lindex $argv 1]
   set passwd [lindex $argv 3]
   set cm [lindex $argv 2]
   
   spawn ssh $user@$host
   
   expect {
        "yes/no" { send "yes\r" }
        "password:" { send "$passwd\r" }
   }
   expect "]*"
   send "$cm\r"
   expect "]*"
   send "exit\r"
   #+END_EXAMPLE
   在上面的情况下, 当我们执行expect脚本时, 需要手动指定 _用户名_ 、 _IP地址_  和 _密码_ ,不然系统会报错, 提示无法执行;

   脚本执行时, 会读取参数数组 *argv* ,并依次将他的里面的值赋给user, host和password, 最终和第一个脚本内容相同;
