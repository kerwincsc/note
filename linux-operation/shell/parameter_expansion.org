#+TITLE: 变量
*** 特殊扩展变量

**** 特殊扩展变量的介绍

     | 表达式             | 说明: 如果parameter的值为空或未赋值,                 | 用途                                                               |
     |--------------------+------------------------------------------------------+--------------------------------------------------------------------|
     | ${parameter:-word} | 则会返回word字符串作为替代                           | 如果变量未定义, 则返回备用的值, 防止变量为空值或因未定义而导致异常 |
     | ${parameter:=word} | 则设置这个变量值为word, 并返回其值                   | 与上一个基本相同, 但该变量会额外给parameter赋值                    |
     | ${parameter:?word} | 那么word字符串将被作为标准错误输出, 否则输出变量的值 | 用于捕捉由于变量未定义而导致的错误, 并 *退出程序*                  |
     | ${parameter:+word} | 则什么都不做, 否则word字符串将替代变量的值           |                                                                    |
     备注: 上表中, 每个表达式内的冒号都是可选的. 如果省略了冒号, 则将每个定义中的"为空或未赋值"部分改为"未赋值",
     也就是说, 运算符仅用于测试变量是否未赋值.

**** 特殊扩展变量功能示例

     - =${parameter:-word}=
       #+BEGIN_SRC shell
       # 先测试未赋值的变量, 下同
       # 为了确保结果不受影响, 可以对要使用的变量先 unset
       echo ${TEST:-unset_variable}

       unset_variable

       # 再测试赋值为空的变量, 下同
       TEST1=
       echo ${TEST1:-set_null}

       set_null
       #+END_SRC
     - =${parameter-word}=
       #+BEGIN_SRC shell
       # 下面这种用法应该只对未赋值的变量有效
       ## 此项是为了确保TEST未被赋值
       unset TEST
       echo ${TEST-unset_variable}

       unset_variable

       # 如果规则生效, 结果应该返回空, 而不是is_null
       TEST=
       echo ${TEST-is_null}

       返回空
       #+END_SRC

     - =${parameter:=word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST:=replaced_value}

       replaced_value

       TEST=
       echo ${TEST:=replaced_value}

       replaced_value
       #+END_SRC
     - =${parameter=word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST=unset_value}

       unset_value

       TEST=
       echo ${TEST=is_null}

       返回空
       #+END_SRC
       备注: 此扩展变量可以解决变量没有定义的问题, 并确保没有定义的变量始终有值;

     - =${parameter:+word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST:+do_nothing_if_TEST_is_unset}

       返回空

       TEST=
       echo ${TEST:+do_nothing_if_TEST_is_null}

       返回空
       #+END_SRC
     - =${parameter+word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST+do_nothing_if_TEST_unset}

       返回空

       TEST=
       echo ${TEST+do_nothing_if_TEST_unset}

       do_nothing_if_TEST_unset
       #+END_SRC
       备注: TEST为空时,
       =echo ${TEST+do_noting_if_TEST_unset}= 返回了"do_nothing_if_TEST_unset"
       
     - =${parameter:?word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST:?This_variable_was_unset}

       bash: TEST: This_variable_was_unset

       TEST=
       echo ${TEST:?This_variable_was_unset}

       bash: TEST: This_variable_was_unset
       #+END_SRC
     - =${parameter?word}=
       #+BEGIN_SRC shell
       unset TEST
       echo ${TEST?return_this_string_if_TEST_is_unset}

       bash: TEST: return_this_string_if_TEST_is_unset

       TEST=
       echo ${TEST?return_this_string_if_TEST_is_unset}

       返回空
       #+END_SRC



     备注: 替换字符串(即介绍里的word部分)可以是带空格的字符串;
           如果使用 *双引号* 括起, 字符串的多个空格可以正常显示, 否则只显示一个空格;

