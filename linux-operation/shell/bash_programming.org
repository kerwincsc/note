* bash shell 编程
** 变量
   - 变量赋值不允许出现空格
     
*** 变量子串

**** 变量子串的介绍

    | 表达式                       | 说明                                                                |
    |------------------------------+---------------------------------------------------------------------|
    | ${parameter}                 | 返回变量 parameter 的内容                                           |
    | ${#parameter}                | 返回变量 parameter 内容的长度(按字符), 也适用于特殊变量             |
    | ${parameter:offset}          | 在变量 parameter 中, 从位置 offset 之后开始提取子串到结尾           |
    | ${parameter:offset:length}   | 在变量 parameter 中, 从位置 offset 之后开始提取长度为 length 的子串 |
    | ${parameter#word}            | 从变量 parameter 的 *开头* 开始删除 *最短* 匹配的 word 子串         |
    | ${parameter##word}           | 从变量 parameter 的 *开头* 开始删除 *最长* 匹配的 word 子串         |
    | ${parameter%word}            | 从变量 parameter 的 *结尾* 开始删除 *最短* 匹配的 word 子串         |
    | ${parameter%%word}           | 从变量 parameter 的 *结尾* 开始删除 *最长* 匹配的 word 子串         |
    | ${parameter/pattern/string}  | 使用 string 代替 *第一个* 匹配的 pattern                            |
    | ${parameter//pattern/string} | 使用 string 代替 *所有的* pattern                                   |

**** 变量子串示例

     - 打印变量长度

       1. echo ${#parameter} 此项速度最快 [[file:compare_speed_in_four_way_to_print_substring.org][验证过程]]
       2. echo ${parameter} | wc -L 注: 有的wc没有此选项, 比如mac
       3. expr length ${parameter}
       4. echo ${parameter} | awk '{print length($0)}' 其中 =($0)= 不是必须的

     - 截取变量内容

       1. echo ${parameter:2}     从指定位置开始截取变量子串
          #+BEGIN_SRC shell
          parameter="I am kerwincsc"
          echo ${parameter:2}

          am kerwincsc
          #+END_SRC
          注: 可以理解为删除前两个字符

       2. echo ${parameter:2:4}      从指定位置开始截取指定长度的变量子串
          #+BEGIN_SRC shell
          parameter="I am kerwincsc"
          echo ${parameter:2:4}

          am k
          #+END_SRC

     - 删除匹配子串

       1. 从变量 _开头_ 删除 *最短* 匹配
          #+BEGIN_SRC shel
          parameter="abcABC123ABCabc"
          echo ${parameter#a*C}

          123ABCabc
          #+END_SRC

       2. 从变量 _开头_ 删除 *最长* 匹配
          #+BEGIN_SRC shel
          parameter="abcABC123ABCabc"
          echo ${parameter##a*C}

          abc
          #+END_SRC

       3. 从变量 _结尾_ 删除 *最短* 匹配
          #+BEGIN_SRC shell
          parameter="abcABC123ABCabc"
          echo ${parameter%a*c}
         
          abcABC123ABC
          #+END_SRC

       4. 从变量 _结尾_ 删除 *最长* 匹配
          #+BEGIN_SRC shell
          parameter="abcABC123ABCabc"
          echo ${parameter%%a*c}

          返回值为空, 因为删光了
          #+END_SRC

     - 替换匹配子串

       1. 替换匹配的第一个子串
          #+BEGIN_SRC shell
          parameter="I am kerwin, yes, kerwin"
          echo ${parameter/kerwin/kerwincsc}

          I am kerwincsc, yes, kerwin
          #+END_SRC

       2. 替换匹配的所有子串
          #+BEGIN_SRC shell
          parameter="I am kerwin, yes, kerwin"
          echo ${parameter//kerwin/kerwincsc}

          I am kerwincsc, yes, kerwincsc
          #+END_SRC

*** 特殊扩展变量

**** 特殊扩展变量的介绍

     | 表达式             | 说明: 如果parameter的值为空或未赋值,                 | 用途                                                               |
     |--------------------+------------------------------------------------------+--------------------------------------------------------------------|
     | ${parameter:-word} | 则会返回word字符串作为替代                           | 如果变量未定义, 则返回备用的值, 防止变量为空值或因未定义而导致异常 |
     | ${parameter:=word} | 则设置这个变量值为word, 并返回其值                   | 与上一个基本相同, 但该变量会额外给parameter赋值                    |
     | ${parameter:?word} | 那么word字符串将被作为标准错误输出, 否则输出变量的值 | 用于捕捉由于变量未定义而导致的错误, 并 *退出程序*                  |
     | ${parameter:+word} | 则什么都不做, 否则word字符串将替代变量的值           |                                                                    |
     备注: 上表中, 每个表达式内的冒号都是可选的. 如果省略了冒号, 则将每个定义中的"为空或未赋值"部分改为"未赋值",
     也就是说, 运算符仅用于测试变量是否未赋值.

**** 特殊扩展变量功能示例

     - =${parameter:-word}=
       #+BEGIN_SRC shell
       # 先测试未赋值的变量, 下同
       # 为了确保结果不受影响, 可以对要使用的变量先 unset
       echo ${TEST:-unset_variable}

       unset_variable

       # 再测试赋值为空的变量, 下同
       TEST1=
       echo ${TEST1:-set_null}

       set_null
       #+END_SRC
     - =${parameter-word}=
       #+BEGIN_SRC shell
       echo ${TEST-unset_variable}
       #+END_SRC
     - ={parameter:=word}=
     - ={parameter=word}=
     - ={parameter:?word}=
     - ={parameter?word}=
     - ={parameter:+word}=
     - ={parameter+word}=

     
    
** 运算符
*** 算术运算符
*** 关系运算符
    关系运算符只支持数字，不支持字符串，除非字符串的值是数字

    下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：

    | 运算符 | 说明                                                | 举例                     | 助记        |
    |--------+-----------------------------------------------------+--------------------------+-------------|
    | -eq    | 检测两个数是否相等，相等返回 true                   | [ $a -eq $b ] 返回 false | equal       |
    | -ne    | 检测两个数是否相等，不相等返回 true                 | [ $a -ne $b ] 返回 true  | no equal    |
    | -gt    | 检测左边的数是否大于右边的，如果是，则返回 true     | [ $a -gt $b ] 返回 false | great than  |
    | -lt    | 检测左边的数是否小于右边的，如果是，则返回 true     | [ $a -lt $b ] 返回 true  | less than   |
    | -ge    | 检测左边的数是否大于等于右边的，如果是，则返回 true | [ $a -ge $b ] 返回 false | great equal |
    | -le    | 检测左边的数是否小于等于右边的，如果是，则返回 true | [ $a -le $b ] 返回 true  | less equal  | 
  
*** 文件测试运算符
    文件测试运算符用于检测 Unix 文件的各种属性
    [[./image/file-test-operator.png]]
** if条件判断

   if判断示例一:
   #+BEGIN_EXAMPLE
   a=5
   if [ $a -gt 3 ]
   then
       echo "a的值大于3"
   fi
   #+END_EXAMPLE
   
   示例二:
   #+BEGIN_EXAMPLE
   a=5
   if [ $a -gt 10 ]
   then
       echo "a的值大于10"
   else
       echo "a的值小于10"
   fi
   #+END_EXAMPLE

   示例三:
   #+BEGIN_EXAMPLE
   a=5
   if [ $a -gt 10 ]
   then
       echo "a的值大于10"
   elif [ $a -lt 4 ]
   then
       echo "a的值小于4"
   else
       echo "a的值大于4且小于10"
   fi
   #+END_EXAMPLE
   

